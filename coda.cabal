cabal-version: 2.2
name:          coda
category:      Language
version:       0.0.1
license:       BSD-2-Clause OR Apache-2.0
license-file:  LICENSE.md
author:        Edward A. Kmett
maintainer:    Edward A. Kmett <ekmett@gmail.com>
stability:     provisional
homepage:      http://github.com/ekmett/coda/
bug-reports:   http://github.com/ekmett/coda/issues
copyright:     Copyright (C) 2017-2018 Edward A. Kmett
build-type:    Simple
synopsis:      The coda compiler
description:   The coda compiler.

extra-source-files:
  .hlint.yaml
  CHANGELOG.md
  CODE_OF_CONDUCT.md
  CONTRIBUTING.md
  README.md
  bin/codex.sh
  code/*.ts
  data/coda.json
  data/images/*.png
  package.json
  tsconfig.json
  tslint.json
  test/code/*.ts

data-files:
  test/data/*.golden

source-repository head
  type: git
  location: git://github.com/ekmett/coda.git

flag terminfo
  description: Build with terminfo.
  default: True
  manual: True

flag test-tasty
  description: Build tasty tests.
  default: True
  manual: True

common app
  ghc-options: -threaded -rtsopts -with-rtsopts=-N

common base
  default-language: Haskell2010
  ghc-options: -Wall
  build-depends: base >= 4.11 && < 5

common aeson                { build-depends: aeson >= 1.1 && < 1.3 }
common array                { build-depends: array }
common bifunctors           { build-depends: bifunctors >= 5 && < 6 }
common bytestring           { build-depends: bytestring ^>= 0.10.8 }
common comonad              { build-depends: comonad >= 5 && < 6 }
common containers           { build-depends: containers >= 0.5.8.2 && < 7 }
common contravariant        { build-depends: contravariant >= 1.4 && < 2 }
common data-default         { build-depends: data-default ^>= 0.7.1.1 }
common data-default-class   { build-depends: data-default-class ^>= 0.1 }
common deepseq              { build-depends: deepseq ^>= 1.4 }
common filepath             { build-depends: filepath ^>= 1.4 }
common ghc-prim             { build-depends: ghc-prim }
common hashable             { build-depends: hashable ^>= 1.2.6 }
common lens                 { build-depends: lens >= 4.15 && < 5 }
common lens-aeson           { build-depends: lens-aeson ^>= 1.0.2 }
common mtl                  { build-depends: mtl ^>= 2.2.1 }
common nats                 { build-depends: nats >= 1.1.1 && < 2 }
common optparse-applicative { build-depends: optparse-applicative }
common profunctors          { build-depends: profunctors ^>= 5.2 }
common reflection           { build-depends: reflection }
common tagged               { build-depends: tagged }
common template-haskell     { build-depends: template-haskell >= 2.12 && < 2.15 }
common text                 { build-depends: text ^>= 1.2 }
common transformers         { build-depends: transformers }
common unordered-containers { build-depends: unordered-containers ^>= 0.2 }
common uri-encode           { build-depends: uri-encode ^>= 1.5.0.5 }

library lsp
  import: aeson, base, bytestring, data-default, filepath, hashable, lens,
          lens-aeson, template-haskell, text, unordered-containers, uri-encode
  hs-source-dirs: src/lsp
  other-modules: Language.Server.TH
  exposed-modules:
    Language.Server.Builder
    Language.Server.Parser
    Language.Server.Protocol

library termination
  import: base, containers, contravariant, hashable, nats, unordered-containers
  hs-source-dirs: src/termination
  exposed-modules:
    Termination
    Termination.Class
    Termination.History
    Termination.Pair
    Termination.Test
    Termination.Trie

library automata
  import: base, containers, contravariant, deepseq, lens
  hs-source-dirs: src/automata
  exposed-modules:
    Automata.Presburger
    Automata.Internal
    Automata.NFA
    Automata.DFA
    Set.Lazy

library version
  import: base
  hs-source-dirs: src/version
  other-modules: Paths_coda
  autogen-modules: Paths_coda
  exposed-modules: Version

library common
  import: base, data-default, ghc-prim, hashable, lens, text
  hs-source-dirs: src/common
  exposed-modules:
    Algebra.Ordered
    Algebra.Zero
    FingerTree
    Relative.Delta.Type
    Syntax.Alex
    Syntax.FromText
    Syntax.Name
    Syntax.Prefix
    Syntax.Sharing
    Util.Bits
    Util.BitQueue

library relative
  import: base, bifunctors, comonad, data-default, ghc-prim, hashable, lens, mtl, profunctors, text
  signatures: Delta
  hs-source-dirs: src/relative
  exposed-modules: Absolute Cat List Located Map Relative Queue Semi
  build-depends: common

library algebra
  import: base, data-default, hashable, lens, profunctors, text
  build-depends: common, relative
  hs-source-dirs: src/algebra
  mixins:
    relative
     (Absolute as Relative.Absolute,
      Cat as Relative.Cat,
      List as Relative.List,
      Located as Relative.Located,
      Map as Relative.Map,
      Queue as Relative.Queue,
      Relative as Relative.Class,
      Semi as Relative.Semi)
    requires (Delta as Relative.Delta.Type)
  exposed-modules:
    Relative.Delta
    Rev
  reexported-modules:
    Algebra.Ordered,
    Algebra.Zero,
    FingerTree,
    Relative.Absolute,
    Relative.Cat,
    Relative.Class,
    Relative.Delta.Type,
    Relative.List,
    Relative.Located,
    Relative.Map,
    Relative.Queue,
    Relative.Semi

library token
  import: base, containers, data-default, lens, reflection, text
  hs-source-dirs: src/token
  exposed-modules: Syntax.Token
  build-depends: algebra, common

library dyck
  import: base, comonad, data-default, hashable, lens, text
  build-depends: algebra
  hs-source-dirs: src/dyck
  signatures: Token
  exposed-modules: Dyck

library lexer
  import: array, base, data-default, lens, text
  build-depends: algebra, common, dyck, token
  hs-source-dirs: src/lexer
  build-tools: alex
  exposed-modules: Syntax.Lexer
  mixins: dyck (Dyck as Syntax.Dyck) requires (Token as Syntax.Token)
  reexported-modules: Syntax.Token, Syntax.Dyck

library rope
  import: base, comonad, data-default, hashable, lens, mtl, profunctors, text, unordered-containers
  build-depends: algebra, common, lsp
  hs-source-dirs: src/rope
  signatures: Dyck Lexer Summary
  exposed-modules: Document Rope

library summary-unit
  import: base, text
  hs-source-dirs: src/summary-unit
  signatures: Dyck
  exposed-modules: Summary
  build-depends: common

library parser
  import: base
  hs-source-dirs: src/parser
  build-depends: algebra, common, lexer, reflection
  exposed-modules: Syntax.Parser

library layout
  import: base, data-default, lens
  hs-source-dirs: src/layout
  build-depends: algebra, common, dyck, reflection
  signatures: Parser
  exposed-modules: Layout

library syntax
  import: base
  hs-source-dirs: src/syntax
  build-depends: common, lexer, rope, summary-unit

  mixins:
    summary-unit (Summary as Syntax.Summary)
      requires (Dyck as Syntax.Dyck),
    rope (Document as Syntax.Document, Rope as Syntax.Rope)
      requires (Dyck as Syntax.Dyck, Lexer as Syntax.Lexer, Summary as Syntax.Summary)

  reexported-modules:
    Syntax.Alex,
    Syntax.Document,
    Syntax.Dyck,
    Syntax.Lexer,
    Syntax.FromText,
    Syntax.Name,
    Syntax.Prefix,
    Syntax.Rope,
    Syntax.Summary,
    Syntax.Token

  other-modules: Syntax

library set
  import: base, data-default, deepseq, lens
  hs-source-dirs: src/set
  ghc-options: -O2
  signatures: Elem
  exposed-modules: Set Set.Internal

library server
  import: aeson, base, bytestring, data-default, lens, mtl, optparse-applicative, text, unordered-containers
  build-depends: algebra, lsp, syntax
  hs-source-dirs: src/server
  exposed-modules: Server Server.Options

library console
  import: base, containers, data-default-class, lens, optparse-applicative, text
  hs-source-dirs: src/console
  build-depends: version, lexer
  build-depends:
    ansi-terminal,
    exceptions,
    haskeline,
    prettyprinter,
    prettyprinter-ansi-terminal,
    prettyprinter-convert-ansi-wl-pprint,
    split

  if flag(terminfo) && !os(windows)
    build-depends: terminfo

  exposed-modules:
    Console
    Console.Command
    Console.Completion
    Console.Options
    Console.Pretty

  other-modules:
    Console.Unicode

library
  import: array, base, bytestring, comonad, containers, data-default-class, lens, optparse-applicative, text, transformers
  hs-source-dirs: src/coda
  build-depends: console
  build-tools: alex
  build-depends:
    bound,
    bytestring-short,
    llvm-hs-pure ^>= 6.0,
    megaparsec >= 6.0 && < 7.0,
    prettyprinter,
    prettyprinter-ansi-terminal,
    text-short

  exposed-modules:
    Console.Pretty.LLVM
    LLVM
    Syntax.Error
    Syntax.Name
    Syntax.Lexer
    Syntax.Located

executable codicil
  import: app, base, data-default-class, optparse-applicative
  build-depends: coda, console, version
  hs-source-dirs: app/codicil
  main-is: Main.hs

executable llvm-test
  import: app, base, text
  build-depends: coda, console, llvm-hs-pure
  hs-source-dirs: app/llvm-test
  main-is: Main.hs

executable codex
  import: app, base, optparse-applicative
  build-depends: common, console, server, version
  hs-source-dirs: app/codex
  main-is: Main.hs

test-suite lsp-test
  import: aeson, app, base, bifunctors, bytestring, containers, filepath,
          lens, tagged, text
  main-is: Main.hs
  type: exitcode-stdio-1.0
  hs-source-dirs: app/lsp-test
  autogen-modules: Paths_coda
  other-modules:
    ListTest
    MessageTest
    MapTest
    Paths_coda
  build-tool-depends: tasty-discover:tasty-discover >= 3.0 && < 4.3
  build-depends: algebra, lsp, syntax
  build-depends:
    QuickCheck,
    tasty >= 0.11,
    tasty-quickcheck,
    tasty-golden >= 2.3,
    tasty-hunit >= 0.9,
  if !flag(test-tasty)
    buildable: False
